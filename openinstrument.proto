syntax = "proto3";

package openinstrument.proto;

message LogMessage {
  uint64 timestamp = 1;
  string message = 2;
}

message StreamVariable {
  enum ValueType {
    UNKNOWN = 0;
    GAUGE = 1;
    RATE = 2;
  }
  string name = 1;
  map<string, string> label = 2;
  ValueType type = 3;

  // Milliseconds since epoch, or if negative, milliseconds before now.
	int64 min_timestamp = 4;
	int64 max_timestamp = 5;
}

message StreamMutation {
  enum SampleType {
    // Do not modify the data at all
    NONE = 0;
    // Average out values between each sampling point
    MEAN = 1;
    // Get the maximum value between each sampling point
    MAX = 2;
    // Get the minimum value between each sampling point
    MIN = 3;
    // Get the non-negative rate between each sampling point
    RATE = 4;
    // Get the (possibly) negative rate between each sampling point
    RATE_SIGNED = 5;
    // Difference between each point
    DELTA = 6;
    // Latest point
    LATEST = 7;
    // Multiply all values by a constant
    MULTIPLY = 8;
    // Add a constant to each value
    ADD = 9;
  }
  SampleType sample_type = 1;

  repeated StreamVariable variable = 4;

  // Stretch or compress the stream so that there is a value every <sample_frequency> ms.
  // Extra values between each sample will be aggregated according to <sample_type>.
  // Gaps in the stream less than <max_gap_interpolate> samples will be filled with interpolated values between the
  // closest real values.
  // Gaps in the stream of more than <max_gap_interpolate> samples will not be filled.
  uint32 sample_frequency = 2;
  uint32 max_gap_interpolate = 3;
}

message StreamAggregation {
  enum AggregateType {
    // Do not aggregate between streams
    NONE = 0;
    // Get the mean of all values at a common time across streams
    MEAN = 1;
    // Get the maximum of all values at a common time across streams
    MAX = 2;
    // Get the minimum of all values at a common time across streams
    MIN = 3;
    // Get the median of all values at a common time across streams
    MEDIAN = 4;
    // Get the total of all values at a common time across streams
    SUM = 5;
    // Get the standard deviation of all values at a common time across streams
    STDDEV = 6;
    // Get a particular percentile (provided in percentile) of all values at a common time across streams
    PERCENTILE = 7;
  }
  AggregateType type = 1;

  // Labels to aggregate by on the input streams. If no labels are specified, aggregation will be done on the variable
  // only.
  repeated string label = 2;

  // Points will be aggregated if they are less than sample_interval ms apart. Default is 30 seconds.
  uint32 sample_interval = 3;

	// Optional percentile
	uint32 percentile = 4;

	// Variables to aggregate
	repeated StreamVariable variable = 5;

	// StreamMutations to aggregate
	repeated StreamMutation mutation = 6;
}

message Value {
  // Milliseconds since epoch
  uint64 timestamp = 1;
  double double_value = 2;
  string string_value = 3;

  // Used for run-length encoding
  uint64 end_timestamp = 4;
}

message ValueStream {
  StreamVariable variable = 2;
  repeated Value value = 4;

  // An optional set of mutations that have been applied to this stream.
  // If the stream contains the raw data, this should be empty.
  repeated StreamMutation mutation = 5;
}

message Query {
  // At least one of these must be set for each subquery
  repeated Query subquery = 1;
  repeated StreamVariable variable = 2;
  repeated double constant = 3;

  repeated StreamMutation mutation = 6;
  repeated StreamAggregation aggregation = 7;
}

message GetRequest {
  StreamVariable variable = 9;

  // If mutations or aggregations are supplied, the GetResponse will have a separate stream for each change requested.
  repeated StreamMutation mutation = 6;
  repeated StreamAggregation aggregation = 7;

  // Limit to how many variables can be returned in a standard GetRequest. This can be overridden if required.
  uint32 max_variables = 8;

  // This request has been forwarded by another store server and should not be forwarded again.
  // This shouldn't happen but is here as a failsafe.
  bool forwarded = 10;

  // Limit the number of values that can be returned for each variable.
  uint32 max_values = 11;
}

message GetResponse {
  bool success = 1;
  string errormessage = 2;

  // Contains a separate stream for every mutation requested in GetRequest, in the same order. If no mutations are
  // requested, the response will contain a single stream of the raw data.
  repeated ValueStream stream = 3;
  repeated LogMessage timer = 4;
}

message AddRequest {
  repeated ValueStream stream = 1;

  // This request has been forwarded by another store server and should not be forwarded again.
  // This shouldn't happen but is here as a failsafe.
  bool forwarded = 2;
}

message AddResponse {
  bool success = 1;
  string errormessage = 2;
  repeated LogMessage timer = 3;
}

message ListRequest {
  StreamVariable prefix = 3;

  // Limit to how many variables can be returned in a standard ListRequest. This can be overridden if required.
  uint32 max_variables = 2;
}

message ListResponse {
  bool success = 1;
  string errormessage = 2;

  // Although this uses the ValueStream for returning a list of variables, the expectation is that the value field is
  // empty.
  repeated ValueStream stream = 3;
  repeated StreamVariable variable = 4;
  repeated LogMessage timer = 5;
}

message StoreFileHeaderIndex {
  StreamVariable variable = 1;
  fixed64 offset = 2;
  fixed32 num_values = 3;
  fixed64 min_timestamp = 4;
  fixed64 max_timestamp = 5;
}

message StoreFileHeader {
  uint32 version = 6;
  uint64 start_timestamp = 1;
  uint64 end_timestamp = 2;
  repeated StoreFileHeaderIndex index = 5;
  string end_key = 7;
}

message RetentionPolicyItem {
  enum Target {
    UNKNOWN = 0;
    KEEP = 1;
    DROP = 2;
  }
  repeated StreamVariable variable = 1;
  repeated string comment = 2;
  Target policy = 3;

  repeated StreamMutation mutation = 4;
}

message RetentionPolicy {
  repeated RetentionPolicyItem policy = 1;
  uint32 interval = 2;
}

message StoreServerStatus {
  enum State {
    UNKNOWN = 0;
    LOAD = 1;
    RUN = 2;
    DRAIN = 3;
    READONLY = 4;
    SHUTDOWN = 5;
  }
  string address = 1;
  State state = 2;
  uint64 last_updated = 3;

  // Optional name for use in the hash ring. This should never change once the
  // server has been added but can be used to replace a server with another one
  // on a different host.
  // If this is not set, the address is used.
  string name = 5;

  // Desired size in bytes for indexed datastore files
  uint64 target_indexed_file_size = 4;
}

message StoreConfig {
  repeated StoreServerStatus server = 1;
  RetentionPolicy retention_policy = 2;
}

message Block {
  string id = 1;
  string end_key = 2;
  uint32 indexed_streams = 3;
  uint32 indexed_values = 4;
  uint32 logged_streams = 5;
  uint32 logged_values = 6;
  uint32 unlogged_streams = 7;
  uint32 unlogged_values = 8;
  bool is_compacting = 9;
  string compact_duration = 10;
}

message LookupBlockRequest {
  Block block = 1;
}

message LookupBlockResponse {
  Block block = 1;
}

message SplitBlockRequest {
  Block block = 1;
}

message SplitBlockResponse {
  repeated Block block = 1;
}

message JoinBlockRequest {
  // This the last block in the sequence. The block with the previous end key
  // will be joined with this one, so the output block will have the same end
  // key, but a different ID.
  Block block = 1;
}

message JoinBlockResponse {
  Block block = 1;
}

message CompactBlockRequest {
  Block block = 1;
}

message CompactBlockResponse {
  Block block = 1;
}

service Store {
  rpc List(ListRequest) returns (ListResponse);
  rpc Get(GetRequest) returns (stream GetResponse);
  rpc Add(stream AddRequest) returns (stream AddResponse);

  rpc LookupBlock(LookupBlockRequest) returns (LookupBlockResponse);
  rpc SplitBlock(SplitBlockRequest) returns (SplitBlockResponse);
  rpc JoinBlock(JoinBlockRequest) returns (JoinBlockResponse);
  rpc CompactBlock(CompactBlockRequest) returns (CompactBlockResponse);
}
